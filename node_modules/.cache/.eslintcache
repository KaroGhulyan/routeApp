[{"/home/karo/Documents/routeApp/src/index.js":"1","/home/karo/Documents/routeApp/src/App.js":"2","/home/karo/Documents/routeApp/src/app/store.js":"3","/home/karo/Documents/routeApp/src/style.js":"4","/home/karo/Documents/routeApp/src/features/routesAPI.js":"5","/home/karo/Documents/routeApp/src/features/appSlice.js":"6","/home/karo/Documents/routeApp/src/components/Header.js":"7","/home/karo/Documents/routeApp/src/components/Map/Map.js":"8","/home/karo/Documents/routeApp/src/components/Stops/Stops.js":"9","/home/karo/Documents/routeApp/src/components/Stops/StopItem.js":"10"},{"size":377,"mtime":1630910296858,"results":"11","hashOfConfig":"12"},{"size":921,"mtime":1630932584518,"results":"13","hashOfConfig":"12"},{"size":180,"mtime":1630837272000,"results":"14","hashOfConfig":"12"},{"size":2785,"mtime":1630936500660,"results":"15","hashOfConfig":"12"},{"size":294,"mtime":1630837204000,"results":"16","hashOfConfig":"12"},{"size":766,"mtime":1630931054643,"results":"17","hashOfConfig":"12"},{"size":1583,"mtime":1630929319112,"results":"18","hashOfConfig":"12"},{"size":2128,"mtime":1630931716880,"results":"19","hashOfConfig":"12"},{"size":487,"mtime":1630927685916,"results":"20","hashOfConfig":"12"},{"size":2724,"mtime":1630936082599,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1hwgdbk",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},"/home/karo/Documents/routeApp/src/index.js",[],["44","45"],"/home/karo/Documents/routeApp/src/App.js",[],"/home/karo/Documents/routeApp/src/app/store.js",[],"/home/karo/Documents/routeApp/src/style.js",[],"/home/karo/Documents/routeApp/src/features/routesAPI.js",[],"/home/karo/Documents/routeApp/src/features/appSlice.js",[],"/home/karo/Documents/routeApp/src/components/Header.js",[],"/home/karo/Documents/routeApp/src/components/Map/Map.js",[],"/home/karo/Documents/routeApp/src/components/Stops/Stops.js",[],"/home/karo/Documents/routeApp/src/components/Stops/StopItem.js",["46"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { routes, currentStop, finishedCount } from '../../features/appSlice';\r\nimport {\r\n  Stop,\r\n  StopNumber,\r\n  StopInfo,\r\n  Address,\r\n  TimeInfo,\r\n  FinishIcon,\r\n  FinishSection,\r\n  StopWrapper,\r\n} from '../../style';\r\n\r\nfunction StopItem({ stop, stops, index }) {\r\n  const {\r\n    information,\r\n    sequence_number,\r\n    arr_time_string,\r\n    end_time_string,\r\n    time_window_earliest,\r\n    time_window_latest,\r\n    isFinished,\r\n  } = stop;\r\n  const [selected, setSelected] = useState(false);\r\n  const [finished, setFinished] = useState(false);\r\n  const [color, setColor] = useState('');\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClick = () => {\r\n    !finished && setSelected(!selected);\r\n  };\r\n  const endRoute = () => {\r\n    let routesData = JSON.parse(JSON.stringify([...stops]));\r\n    routesData[index].isFinished = true;\r\n    dispatch(finishedCount());\r\n    dispatch(routes(routesData));\r\n    dispatch(currentStop(stop));\r\n    setFinished(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n\r\n    if (isFinished) {\r\n      setFinished(true);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [stop]);\r\n  useEffect(() => {\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    if (selected) {\r\n      setColor('#E90052');\r\n    }\r\n    if (finished) {\r\n      setColor('#4688F1');\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }\r\n  }, [selected, finished]);\r\n  return (\r\n    <StopWrapper selected={selected} finished={finished}>\r\n      <Stop onClick={handleClick} finished={finished}>\r\n        <StopInfo>\r\n          <StopNumber selected={selected || finished ? color : ''}>\r\n            {finished ? (\r\n              <FinishIcon finished={finished && 'white'} />\r\n            ) : (\r\n              index + 1\r\n            )}\r\n          </StopNumber>\r\n          <Address>\r\n            <span>{information?.name}</span>\r\n            <p>{information?.street}</p>\r\n            <p>\r\n              {information?.zipcode} {information?.city}\r\n            </p>\r\n          </Address>\r\n        </StopInfo>\r\n        {!finished && (\r\n          <TimeInfo>\r\n            <span>{arr_time_string || end_time_string}</span>\r\n            <p>\r\n              {time_window_earliest}-{time_window_latest}\r\n            </p>\r\n          </TimeInfo>\r\n        )}\r\n      </Stop>\r\n      {selected && !finished && (\r\n        <FinishSection onClick={endRoute}>\r\n          <div>\r\n            <FinishIcon />\r\n            <p>Finish</p>\r\n          </div>\r\n        </FinishSection>\r\n      )}\r\n    </StopWrapper>\r\n  );\r\n}\r\n\r\nexport default StopItem;\r\n",{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":18,"column":5,"nodeType":"53","messageId":"54","endLine":18,"endColumn":20},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'sequence_number' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]